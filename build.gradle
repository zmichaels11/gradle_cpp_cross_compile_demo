apply plugin: 'cpp'

wrapper {
    gradleVersion = '4.8'
}

model {
    platforms {
        linux_armv7 {
            architecture "armv7"
            operatingSystem "linux"
        }

        linux_arm64 {
            architecture "arm64"
            operatingSystem "linux"
        }

        linux_x86 {
            architecture "x86"
            operatingSystem "linux"
        }

        linux_amd64 {
            architecture "amd64"
            operatingSystem "linux"
        }

        windows_x86 {
            architecture "x86"
            operatingSystem "windows"
        }

        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args -> 
                    args << "-std=c++14"
                }
            }

            target("linux_armv7") {
                cCompiler.executable = "arm-linux-gnueabi-gcc"
                cppCompiler.executable = "arm-linux-gnueabi-g++"
                linker.executable = "arm-linux-gnueabi-g++"
                assembler.executable = "arm-linux-gnueabi-as"
                staticLibArchiver.executable = "arm-linux-gnueabi-ar"

                linker.withArguments { args ->
                    args << "-static"
                }
            }

            target("linux_arm64") {
                cCompiler.executable = "aarch64-linux-gnu-gcc"
                cppCompiler.executable = "aarch64-linux-gnu-g++"
                linker.executable = "aarch64-linux-gnu-g++"
                assembler.executable = "aarch64-linux-gnu-as"
                staticLibArchiver.executable = "aarch64-linux-gnu-ar"

                linker.withArguments { args -> 
                    args << "-static"
                }
            }

            target("linux_x86") {
                cCompiler.withArguments { args ->
                    args << "-m32"
                }

                cppCompiler.withArguments { args -> 
                    args << "-m32"
                }

                assembler.withArguments { args ->
                    args << "-m32"
                }

                linker.withArguments { args -> 
                    args << "-m32"
                }
            }

            target("linux_amd64") {
                cCompiler.withArguments { args ->
                    args << "-m64"
                }

                cppCompiler.withArguments { args ->
                    args << "-m64"
                }

                assembler.withArguments { args -> 
                    args << "-m64"
                }

                linker.withArguments { args ->
                    args << "-m64"
                }
            }

            target("windows_x86") {
                cCompiler.executable = "i686-w64-mingw32-gcc"
                cppCompiler.executable = "i686-w64-mingw32-g++"
                linker.executable = "i686-w64-mingw32-g++"
                assembler.executable = "i686-w64-mingw32-as"
                staticLibArchiver.executable = "i686-w64-mingw32-ar"

                linker.withArguments { args ->
                    args << "-static"
                }
            }

            target("windows_amd64") {
                cCompiler.executable = "x86_64-w64-mingw32-gcc"
                cppCompiler.executable = "x86_64-w64-mingw32-g++"
                linker.executable = "x86_64-w64-mingw32-g++"
                assembler.executable = "x86_64-w64-mingw32-as"
                staticLibArchiver.executable = "x86_64-w64-mingw32-ar"

                linker.withArguments { args -> 
                    args << "-static"
                }
            }
        }
    }

    components {
        hello_world (NativeExecutableSpec) {
            targetPlatform "linux_armv7"
            targetPlatform "linux_arm64"
            targetPlatform "linux_x86"
            targetPlatform "linux_amd64"
            targetPlatform "windows_x86"
            targetPlatform "windows_amd64"

            sources {
                cpp {
                    source {
                        srcDir "src/main/cpp"
                        include "**/*.cpp"
                    }

                    exportedHeaders {
                        srcDir "src/main/include"
                        include "**/*.hpp"
                    }
                }
            }
        }
    }
}